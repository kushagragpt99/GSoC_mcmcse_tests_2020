
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################
> ## Aim: Implementing the RBM paper
> ## Also: Estimating variance of AR(1) using RBM
> ################################################
> 
> set.seed(10)
> library(mcmcse)
mcmcse: Monte Carlo Standard Errors for MCMC
Version 1.4-1 created on 2020-01-29.
copyright (c) 2012, James M. Flegal, University of California, Riverside
                    John Hughes, University of Colorado, Denver
                    Dootika Vats, University of Warwick
                    Ning Dai, University of Minnesota
 For citation information, type citation("mcmcse").
 Type help("mcmcse-package") to get started.

> 
> #Function for generating AR(1) output
> AR1 <- function(n, rho, tau)  {
+   X <- numeric(length = n)
+   Y <- rnorm(n, mean = 0, sd = tau)
+   X[1] = 0
+   
+   for(i in 2:n) { 
+     X[i] = rho*X[i-1] + Y[i]
+   }
+   
+   return(X)
+ }
> 
> #Returns batches(Y) by making batches of X
> get_batch <- function(X, n, a, b) {
+   Z <- numeric(length = a)  
+   
+   for(i in a:1) {
+     Z[i]=mean(X[ (b*(i-1)+1) : (b*i)])
+   }
+   
+   return(Z)
+ }
> 
> #Implementation of RBM
> RBM <- function(Y, m, n, a, b)  {
+   overall_mean <- mean(Y)
+   Z <- sum( (Y - overall_mean)^2 )*(b/( (m*a) - 1) )
+   return(Z)
+ }
> 
> #Initial settings
> rho <- 0.9
> tau <- 1
> m <- 5
> n <- 1e3
> a <- floor(sqrt(n))
> b <- a
> X <- matrix(nrow = m, ncol = n)
> Y <- matrix(nrow = m, ncol = a)
> 
> #Sampling m replications from AR(1)
> for( i in 1:m)  {
+     X[i,] <- AR1(n, rho, tau)
+     Y[i,] <- get_batch(X[i,], n, a, b)
+ }
> 
> #Estimation of RBM
> RBM(Y, m, n, a, b)
[1] 81.1829
> 
> proc.time()
   user  system elapsed 
  0.203   0.202   1.144 
